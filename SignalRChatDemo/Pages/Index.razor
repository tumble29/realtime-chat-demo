@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavManager
@implements IAsyncDisposable

<div>
    <p>Users connected: @(userList.Count)</p>
    <ul>
        @foreach (string user in userList)
        {
            <li>@user</li>
        }
    </ul>
</div>

<div class="form-group">
    <label>
        User: <input @bind="userInput" />
    </label>
    <label>
        Message: <input @bind="messageInput" />
    </label>
</div>

<div>
    @if (userList != null)
    {
        <select id="user-list" @bind="selectedUser">
            <option value=null>All.....</option>
            @foreach (var user in userList)
            {
                @if (user != hubConnection?.ConnectionId)
                {
                    <option value="@user">@user</option>
                }
            }
        </select>
    }

    <button @onclick="Send" disabled="@(IsConnected == false)">Send</button>
</div>
<hr />
<ul>
    <p><b>All Chat</b></p>
    @foreach (string message in messages)
    {
        <li>@message</li>
    }
</ul>
<hr />
<ul>
    <p><b>Private Chat</b></p>
    @foreach (string message in privateMessages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new();
    private List<string> privateMessages = new();
    private List<string> userList = new();
    private string? selectedUser;
    private string? userInput;
    private string? messageInput;
    private readonly static HashSet<string> connectedUsers = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavManager.ToAbsoluteUri("/chatHub"))
        .WithAutomaticReconnect()
        .Build();


        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var formattedMessage = $"{user}: {message}";
            messages.Add(formattedMessage);
            InvokeAsync(StateHasChanged);
        });


        hubConnection.On<string>("Broadcast", (message) =>
        {
            messages.Add(message);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string, string, string>("ReceivePrivateMessage", (user, SenderID, ReceiverID, message) =>
        {
            privateMessages.Add($"{user}: {message}");
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<List<string>>("ReceiveInitializeUserList", (list) =>
        {
            userList = list;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("RequestInitializeUserList");
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            if (selectedUser != null && selectedUser != "")
                await hubConnection.SendAsync("SendPrivateMessage", userInput, selectedUser, messageInput);
            else
                await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;


    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
   
}